// jenkins/Jenkinsfile
pipeline {
    agent any

    environment {
        IMAGE_NAME = 'meu-app-django'
        KUBECONFIG_CREDENTIALS_ID = 'kubeconfig-kind'
        K8S_NAMESPACE = 'default'
        SONARQUBE_SERVER = 'SonarQube Local'
    }

    tools {
        jdk 'jdk17'
    }

    stages {
        stage('Checkout') {
            agent any
            steps {
                echo 'Clonando o repositório...'
                checkout scm
            }
        }

        stage('Build Docker Image') {
            agent any
            steps {
                echo "Construindo a imagem Docker: ${IMAGE_NAME}:${env.BUILD_NUMBER}"
                sh "docker build -t ${IMAGE_NAME}:${env.BUILD_NUMBER} ./app"
            }
        }

        stage('Load Image into Kind') {
            agent any
            steps {
                echo "Carregando imagem ${IMAGE_NAME}:${env.BUILD_NUMBER} no cluster Kind..."
                sh "kind load docker-image ${IMAGE_NAME}:${env.BUILD_NUMBER} --name staging-cluster"
            }
        }

        stage('Test Application (Check)') {
            agent any
            steps {
                echo "Executando 'manage.py check' via docker run..."
                sh """
                    docker run --rm \
                        --entrypoint="" \
                        ${IMAGE_NAME}:${env.BUILD_NUMBER} \
                        python manage.py check
                """
            }
        }

        stage('SonarQube Analysis') {
            agent any
            steps {
                echo "Executando análise SonarQube..."
                withSonarQubeEnv('SonarQube Local') {
                    sh """
                        ${tool 'SonarScanner'}/bin/sonar-scanner \
                          -Dsonar.projectKey=django-crm-app \
                          -Dsonar.sources=./app \
                          -Dsonar.projectBaseDir=./app
                    """
                }
            }
        }

        stage('Quality Gate') {
            agent any
            steps {
                echo "Verificando SonarQube Quality Gate..."
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline abortado devido à falha no Quality Gate: ${qg.status}"
                        } else {
                            echo "Quality Gate passou!"
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes (Kind)') {
            agent any
            steps {
                echo "Implantando no Kubernetes (Namespace: ${K8S_NAMESPACE})..."
                withKubeConfig([credentialsId: KUBECONFIG_CREDENTIALS_ID]) {
                    sh "sed -i 's|image: .*|image: ${IMAGE_NAME}:${env.BUILD_NUMBER}|g' k8s/deployment.yaml"

                    echo "Aplicando deployment..."
                    sh "kubectl apply -f k8s/deployment.yaml --namespace ${K8S_NAMESPACE}"
                    echo "Aplicando service..."
                    sh "kubectl apply -f k8s/service.yaml --namespace ${K8S_NAMESPACE}"
                    echo "Aplicando ingress..."
                    sh "kubectl apply -f k8s/ingress.yaml --namespace ${K8S_NAMESPACE}"

                    echo "Verificando rollout do deployment..."
                    script {
                        def deploymentName = sh(script: "grep 'name:' k8s/deployment.yaml | head -n 1 | awk '{print \$2}'", returnStdout: true).trim()
                        if (deploymentName) {
                             sh "kubectl rollout status deployment/${deploymentName} -n ${K8S_NAMESPACE} --timeout=120s"
                        } else {
                            echo "WARN: Não foi possível extrair o nome do deployment de k8s/deployment.yaml."
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finalizado.'
        }
        success {
            echo 'Pipeline executado com sucesso!'
        }
        failure {
            echo 'Pipeline falhou!'
        }
    }
}
