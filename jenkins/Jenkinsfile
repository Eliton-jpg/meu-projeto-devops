// jenkins/Jenkinsfile
pipeline {
    agent any

    environment {
        IMAGE_NAME = 'meu-app-django'
        KUBECONFIG_CREDENTIALS_ID = 'kubeconfig-kind'
        K8S_NAMESPACE = 'default'
    }

    stages {
        stage('Checkout') {
            agent any
            steps {
                echo 'Clonando o repositório...'
                checkout scm
            }
        }

        stage('Build Docker Image') {
            agent {
                docker {
                    image 'docker:latest'
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                echo "Construindo a imagem Docker: ${IMAGE_NAME}:${env.BUILD_NUMBER}"
                script {
                    def dockerImage = docker.build("${IMAGE_NAME}:${env.BUILD_NUMBER}", "./app")
                }
            }
        }

        stage('Load Image into Kind') {
            agent any
            when {
                expression { true }
            }
            steps {
                echo "Carregando imagem ${IMAGE_NAME}:${env.BUILD_NUMBER} no cluster Kind..."
                sh "kind load docker-image ${IMAGE_NAME}:${env.BUILD_NUMBER} --name staging-cluster"
            }
        }

        stage('Test Application') {
            agent {
                docker {
                    image "${IMAGE_NAME}:${env.BUILD_NUMBER}"
                    reuseNode true
                    // Adicione esta linha para definir o diretório de trabalho do agente
                    args '-w /app'
                }
            }
            steps {
                echo "Executando testes dentro do container ${IMAGE_NAME}:${env.BUILD_NUMBER}"
                // Agora o comando sh será executado a partir de /app por padrão
                sh 'python manage.py check'
            }
        }

        stage('Deploy to Kubernetes (Kind)') {
            agent any
            steps {
                echo "Implantando no Kubernetes (Namespace: ${K8S_NAMESPACE})..."
                withKubeConfig([credentialsId: KUBECONFIG_CREDENTIALS_ID]) {
                    sh "sed -i 's|image: .*|image: ${IMAGE_NAME}:${env.BUILD_NUMBER}|g' infra/k8s/deployment.yaml"

                    echo "Aplicando deployment..."
                    sh "kubectl apply -f infra/k8s/deployment.yaml --namespace ${K8S_NAMESPACE}"
                    echo "Aplicando service..."
                    sh "kubectl apply -f infra/k8s/service.yaml --namespace ${K8S_NAMESPACE}"

                    echo "Verificando rollout do deployment..."
                    sh "kubectl rollout status deployment/django-crm-app --namespace ${K8S_NAMESPACE} --timeout=120s"
                }
            }
        }

    }

    post {
        always {
            echo 'Pipeline finalizado.'
        }
        success {
            echo 'Pipeline executado com sucesso!'
        }
        failure {
            echo 'Pipeline falhou!'
        }
    }
}
